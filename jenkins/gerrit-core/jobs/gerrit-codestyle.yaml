- job:
    name: Gerrit-codestyle
    description: "Gerrit code-style checker for an open change\n"
    defaults: verifier-defaults
    node: bazel-debian
    builders:
      - shell: !include-raw-escape: gerrit-bazel-merge-target-branch.sh
      - shell: !include-raw-escape: gerrit-bazel-fetch-all-submodules.sh
      - shell: |
          #!/bin/bash -xe
          cd gerrit
          GJF_VERSION=$(grep -o "^VERSION=.*$" tools/setup_gjf.sh | grep -o "[0-9][0-9]*\.[0-9][0-9]*")
          GJF="/home/jenkins/format/google-java-format-$GJF_VERSION"
          if [ ! -f "$GJF" ]; then
            ./tools/setup_gjf.sh
            GJF=$(find 'tools/format' -regex '.*/google-java-format-[0-9][0-9]*\.[0-9][0-9]*')
          fi
          echo 'Running google-java-format check...'
          git show --diff-filter=AM --name-only --pretty="" HEAD | grep java$ | xargs -r $GJF -n --set-exit-if-changed
      - shell: |
          #!/bin/bash -xe
          cd gerrit
          bazelisk version
          if ([ "$TARGET_BRANCH" == "master" ] || [ "$TARGET_BRANCH" == "stable-3.0" ] || [ "$TARGET_BRANCH" == "stable-2.16" ] || [ "$TARGET_BRANCH" == "stable-2.15" ]) && git show --diff-filter=AM --name-only --pretty="" HEAD | grep polygerrit-ui
          then
            echo 'Running PolyGerrit lint check...'
            . set-java.sh 8
            bazelisk test //polygerrit-ui/app:lint_test --test_output errors
            bazelisk test //polygerrit-ui/app:polylint_test --test_output errors
          fi
      - shell: |
          #!/bin/bash -xe
          cd gerrit
          if ([ "$TARGET_BRANCH" == "master" ] || [ "$TARGET_BRANCH" == "stable-3.0" ] || [ "$TARGET_BRANCH" == "stable-2.16" ] || [ "$TARGET_BRANCH" == "stable-2.15" ]) && git show --diff-filter=AM --name-only --pretty="" HEAD | grep polygerrit-ui
          then
            echo 'Running PolyGerrit template test...'
            . set-java.sh 8
            bazelisk test //polygerrit-ui/app:all --test_tag_filters=template --test_output errors
          fi
      - shell: |
          #!/bin/bash -e
          echo 'Running buildifier check...'
          . set-java.sh 8
          buildifier --version
          cd gerrit
          EXITCODE=0
          for buildfile in $((git show --diff-filter=AM --name-only --pretty="" HEAD | grep --regex "WORKSPACE\|BUILD\|\.bzl$") || true)
          do
              BUILDIFIER_OUTPUT_FILE="$(mktemp)_buildifier_output.log"
              buildifier -format=text -v -mode=check $buildfile 2>&1 | tee ${BUILDIFIER_OUTPUT_FILE}
              if [[ -s ${BUILDIFIER_OUTPUT_FILE} ]]; then
                  echo "Need Formatting:"
                  echo "[$buildfile]"
                  echo "Please fix manually or run buildifier $buildfile to auto-fix."
                  buildifier -v -mode=diff $buildfile
                  rm -rf ${BUILDIFIER_OUTPUT_FILE}
                  EXITCODE=1
              fi
          done
          exit $EXITCODE
