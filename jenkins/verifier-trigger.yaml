- job:
    name: 'verifier-trigger'
    project-type: pipeline
    concurrent: false
    node: master
    triggers:
      - pollscm:
          cron: 'H/5 * * * *'
    properties:
      - build-discarder:
          days-to-keep: 256
      - authorization:
          anonymous:
            - job-discover
            - job-read
            - job-extended-read
    dsl: |
      import groovy.json.*

      def gerrit = "https://gerrit-review.googlesource.com/"
      def int maxChanges = 100
      def lastBuild = build.getPreviousSuccessfulBuild()
      def lastBuildStartTimeMillis = lastBuild == null ?
        (System.currentTimeMillis() - 1800000) : lastBuild.getStartTimeInMillis()
      def sinceMillis = lastBuildStartTimeMillis - (24 * 3600 * 1000)
      def since = Globals.tsFormat.format(new Date(sinceMillis))

      if(lastBuild != null) {
        println "Last successful build was " + lastBuild.toString()
      }

      println ""
      println "Querying Gerrit for last modified changes since ${since} ..."

      def gerritQuery = "status:open since:\"" + since + "\""

      queryUrl = new URL(gerrit + "changes/?pp=0&o=CURRENT_REVISION&o=DETAILED_ACCOUNTS&o=DETAILED_LABELS&n=" + Globals.maxChanges + "&q=" +
                            gerritQuery.encodeURL())

      def changes = queryUrl.getText().substring(5)
      def jsonSlurper = new JsonSlurper()
      def changesJson = jsonSlurper.parseText(changes)

      def projects = changesJson.collect { it.project }
      def hookUrl = "${env.JENKINS_URL}gerrit-webhook/"

      node('master') {
          projects.each { project ->
              stage("${project}") {
                  def jsonPayload = '{"project":{"name":"' + project +
                      '"}, "type":"patchset-created"}'
                  def cmd = ["curl", "-v", "-d", jsonPayload, hookUrl]
                  println cmd
                  def exec = cmd.execute()
                  exec.waitFor()
                  if (exec.exitValue() > 0) {
                    error "Could not trigger job for ${project}"
                  }
              }
          }
      }
