{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8cd4793c_dc6cb372",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-05-19T13:17:45Z",
      "side": 1,
      "message": "@Thomas what do you think?\n",
      "revId": "a27d4679d55a0a7110d873fa226a5ee4accd964b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8788dbf6_eabf9346",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-05-19T14:00:22Z",
      "side": 1,
      "message": "I agree that adding the external_ prefix makes sense. But how does this help with the underlying issue? The plugin/package.json is still overwritten by plugin/$PLUGIN/external_package.json and thus we might lose the dependencies within, if not also present in the external_package.json. And what happens if there are multiple such plugins (I know that this is not relevant for the CI builds and also the case for maven dependencies, however there we can at least load the plugin specific external_plugin_deps.bzl in the global one and thus serve all plugins.\n\nIf this unblocks the 3.6 release, I am fine with this change as a step in the right direction, but we should look into a way to have some kind of federate way of managing the package.json files.",
      "revId": "a27d4679d55a0a7110d873fa226a5ee4accd964b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bdea3ab_78a834f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-05-19T14:18:19Z",
      "side": 1,
      "message": "\u003e The plugin/package.json is still overwritten by plugin/$PLUGIN/external_package.json and thus we might lose the dependencies within\n\nNot really, it\u0027s the responsibility of plugin author to include all needed dependencies in external_package.json.\n\nConsider image-diff plugin. Right now, there is only one custom dependency:\n\n  \"dependencies\": {\n        \"resemblejs\": \"^3.2.4\"\n  },\n  \nIf typescript-api is also required there, this file would be extended, with:\n\n  \"dependencies\": {\n\n  },\n\n  \"dependencies\": {\n        \"@gerritcodereview/typescript-api\": \"3.4.4\",\n        \"@polymer/decorators\": \"^3.0.0\",\n        \"@polymer/polymer\": \"^3.4.1\",\n        \"resemblejs\": \"^3.2.4\",\n        \"lit\": \"^2.1.1\"\n    },\n    \n\u003e And what happens if there are multiple such plugins [...]\n\nYou would patch plugins/package.json for that and include all needed custom npm dependencies for all your custom plugins.\n\n\u003e If this unblocks the 3.6 release, I am fine with this change as a step in the right direction [...]\n\nThis is even worse, given that change 314315 is included in stable-3.5 many front end plugins are broken since then.\n\n\u003e [...] but we should look into a way to have some kind of federate way of managing the package.json files.\n\ngood idea, we should check with rules_nodejs maintainers if this use case is supported: [1].\n\n[1] https://github.com/bazelbuild/rules_nodejs",
      "parentUuid": "8788dbf6_eabf9346",
      "revId": "a27d4679d55a0a7110d873fa226a5ee4accd964b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab79323c_7f210bc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-05-19T14:18:19Z",
      "side": 1,
      "message": "@Ben, @Dmitrii, would you also be fine with this approach to unblock building of front end plugin for stable-3.5 an stable-3.6 branch on CI?\n\nI\u0027ve also verified, that with this change reviewers\u0027s plugin build is green again: [1],\n\n[1] https://gerrit-ci.gerritforge.com/view/Plugins-master/job/plugin-reviewers-bazel-master/50/\n",
      "revId": "a27d4679d55a0a7110d873fa226a5ee4accd964b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}