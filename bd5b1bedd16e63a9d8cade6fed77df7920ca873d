{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ac3aac_f15945b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-12-19T00:38:30Z",
      "side": 1,
      "message": "I like this change to consistently use remote cache. But just to be sure, should we try to disable the remote cache entirely and compare the build time with and without remote cache usage?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 52
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f74fb00_7d0d96fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-19T12:10:17Z",
      "side": 1,
      "message": "Sure, good idea.",
      "parentUuid": "f2ac3aac_f15945b5",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 52
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "946243d5_44bfbea0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-19T20:47:48Z",
      "side": 1,
      "message": "I just did the test and compared a no-op build:\n- with remote-cache \u003d\u003e 120 sec\n- without remote-cache \u003d\u003e 300 sec\n\nI believe using the remote cache adds a significant value to the build speedup.",
      "parentUuid": "3f74fb00_7d0d96fe",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 52
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "522a1847_eebce2cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-12-19T00:38:30Z",
      "side": 1,
      "message": "Add this upstream issue as a reference: [1]?\n\n[1]: https://github.com/bazelbuild/bazel/issues/20161",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 61
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18e9d096_6cffa85f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-19T20:49:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "522a1847_eebce2cb",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 61
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20bd5c41_fec683f7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-12-19T00:38:30Z",
      "side": 1,
      "message": "While I agree with you, that this is a behavioral and disruptive change in Bazel 7.x release, the fact, that we are issuing those three major commands in Gerrit verification build:\n\n```\n#0\nexport BAZEL_OPTS\u003d--remote_cache\u003dhttps://gerrit-ci.gerritforge.com/cache\n#1\nbazelisk build $BAZEL_OPTS plugins:core release api\n#2\ntools/maven/api.sh install\n#3\ntools/eclipse/project.py --bazel bazelisk\n```\n\nBut only command #1 is using remote cache, while the second and third don\u0027t use remote cache. What\u0027s the point? Either we always use the remote cache, or don\u0027t use it at all.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 17,
        "endChar": 54
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c59be222_d16ccf3a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-19T20:47:48Z",
      "side": 1,
      "message": "It makes sense to always use the remote cache for all commands.",
      "parentUuid": "20bd5c41_fec683f7",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 17,
        "endChar": 54
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f760a35b_e2dc6d18",
        "filename": "jenkins/gerrit-bazel-build.sh",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-12-19T00:38:30Z",
      "side": 1,
      "message": "This would mark the tree \"dirty\", and affect version stamping, right? Because the `.bazelrc` file that is mutated here is under the git control.\n\nSee default configuration files, that Bazel considering during the build: [1]. So you could probably do this (untested):\n\n```\n  $ echo \"build $BAZEL_OPTS\" \u003e\u003e $HOME/.bazelrc\n```\n\nAlternatively, with this change in place: [2], you could stay `gerrit` workspace specific, and not mess around with user\u0027s environment:\n\n```\n  $ echo \"build $BAZEL_OPTS\" \u003e user.bazelrc\n```\n\n[1]: https://bazel.build/run/bazelrc#bazelrc-file-locations\n[2]: https://gerrit-review.googlesource.com/c/gerrit/+/398500",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0e2ea80_180830ec",
        "filename": "jenkins/gerrit-bazel-build.sh",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-12-19T05:18:24Z",
      "side": 1,
      "message": "\u003e Because the \u0027bazel build\u0027 commands are dynamically generated, the only way to pass the extra parameters is via .bazelrc\n\nWe could also extend our own scripts: `tools/maven/api.sh` and `tools/eclipse/project.py` and support `--build-options` options, and pass it like this: `--build-opions\u003d$BAZEL_OPTS`. Or, alternatively, we could evaluate/read the environment variable `$BAZEL_OPTS` in those scripts and if defined, pass it to `bazel` command.\n\nLooking at `tools/maven/api.sh` we already support the `$VERBOSE` variable:\n\n```\nif [[ \"${VERBOSE:-x}\" !\u003d \"x\" ]]; then\n  set -o xtrace\nfi\n```\n\nThat would be the least invasive way to support addition build options in Gerrit CI, and in other build environments.",
      "parentUuid": "f760a35b_e2dc6d18",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20dd8bd0_70e367ea",
        "filename": "jenkins/gerrit-bazel-build.sh",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-19T20:47:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0e2ea80_180830ec",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5641511_729804d2",
        "filename": "jenkins/gerrit-bazel-build.sh",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-12-20T05:45:20Z",
      "side": 1,
      "message": "\u003e We could also extend our own scripts: tools/maven/api.sh and tools/eclipse/project.py and support --build-options options, and pass it like this: --build-opions\u003d$BAZEL_OPTS. Or, alternatively, we could evaluate/read the environment variable $BAZEL_OPTS in those scripts and if defined, pass it to bazel command.\n\nI have added support for `BAZEL_OPTS` to gerrit build utilities in this change: [1].\n\nGiven that Bazel release 7.x changed the default behavior to support BuildWithoutBytes per default: [2], it is crucial to support additional options, like remote cache in gerrit build utilities, in non invasive way:\n\nWith my change in place, gerrit utilities would just respect BAZEL_OPTS environment variable, so that this sequence of commands would just work:\n\n```bash\n  $ export BAZEL_OPTS\u003d\"--remote_cache\u003dhttp://idaia.de:9090 --sandbox_tmpfs_path\u003d/tmp\"\n  $ bazel build $BAZEL_OPTS release\n  $ tools/maven/api.sh install\n  $ tools/eclipse/project.py\n```\n\nIn case we would go with my change: [1], this change should not be needed.\n\n[1]: https://gerrit-review.googlesource.com/c/gerrit/+/398778\n[2]: https://blog.bazel.build/2023/10/06/bwob-in-bazel-7.html",
      "parentUuid": "20dd8bd0_70e367ea",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e2bb909_29744357",
        "filename": "jenkins/gerrit-bazel-build.sh",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-20T06:48:45Z",
      "side": 1,
      "message": "I would prefer to rely on the `.bazelrc` (and your addition of `user.bazelrc`) because it would be guaranteed to be used in any current or future scripting. Amending the current scripts would work for now, but what about tomorrow for new scripting?",
      "parentUuid": "e5641511_729804d2",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9f131c9_d34ce63b",
        "filename": "jenkins/gerrit-bazel-build.sh",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-12-20T07:35:20Z",
      "side": 1,
      "message": "The tomorrow scripting utilities (which one do you have in mind?) could also respect `BAZEL_OPTS` as documented in the `Documentation/dev-bazel.txt`, couldn\u0027t they?",
      "parentUuid": "1e2bb909_29744357",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "572270c2_1bc1d30d",
        "filename": "jenkins/gerrit-bazel-build.sh",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-12-20T08:04:58Z",
      "side": 1,
      "message": "\u003e The tomorrow scripting utilities (which one do you have in mind?) could also respect `BAZEL_OPTS` as documented in the `Documentation/dev-bazel.txt`, couldn\u0027t they?\n\nSure, for the ones developed by us :-) What about any other utility? What if the bazel command is executed implicitly?\n\nI would prefer to rely on settings that imply less work and is more automatic.",
      "parentUuid": "e9f131c9_d34ce63b",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "907b102e_a29f1746",
        "filename": "jenkins/gerrit-bazel-build.sh",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2023-12-20T08:12:13Z",
      "side": 1,
      "message": "SGTM.",
      "parentUuid": "572270c2_1bc1d30d",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 43,
        "endChar": 4
      },
      "revId": "bd5b1bedd16e63a9d8cade6fed77df7920ca873d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}