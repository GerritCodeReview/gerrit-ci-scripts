{
  "comments": [
    {
      "key": {
        "uuid": "ab996097_5e17cb92",
        "filename": "jenkins-docker/slave-node-wct/Dockerfile",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2019-06-05T12:40:46Z",
      "side": 1,
      "message": "Is there a way to test these changes? I am not 100% sure I am executing `npm install` from the right folder (the project root).",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "c20e64e46bd76e87ada05cd5dc9e36e66b838a8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62c7b1a8_1adf25c5",
        "filename": "jenkins-docker/slave-node-wct/Dockerfile",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-05T13:03:46Z",
      "side": 1,
      "message": "Sounds a lot better :-)\nIt becomes part of the warm-up right?\nIt should be added also as part of the build script, so that if dependencies change, there will be no need to create immediately a new Docker image and publish it.",
      "parentUuid": "ab996097_5e17cb92",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "c20e64e46bd76e87ada05cd5dc9e36e66b838a8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db6748c8_61a576f4",
        "filename": "jenkins-docker/slave-node-wct/Dockerfile",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-06-05T13:15:48Z",
      "side": 1,
      "message": "Maybe we can add it to the cache-warmup in the slave-bazel image. Then we would have a base set of the dependencies installed and would just have to update dependencies that changed in the meantime, when running the job. We would however have to install them globally then.\n\n@Ole: The Gerrit-repository is not yet present in this intermediary container. In general during the build of the containers Gerrit will only be cloned to fill the buck/bazel chaches (in slave-buck / slave-bazel), but deleted afterwards. Gerrit will be cloned for each job, so we cannot perform a local npm install, when building the docker containers.",
      "parentUuid": "62c7b1a8_1adf25c5",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "c20e64e46bd76e87ada05cd5dc9e36e66b838a8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6abf6190_04fb6ada",
        "filename": "jenkins-docker/slave-node-wct/Dockerfile",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2019-06-05T13:53:14Z",
      "side": 1,
      "message": "I see - does that mean there is no way to do the `npm install` in each job? So we have to make all scripts also work with globally installed deps? \nThat\u0027s a bit tricky e.g. in https://gerrit-review.googlesource.com/c/gerrit/+/224572, because my current approach is to have a bazel build dependency on a file in node_modules/, so that it can be copied to runfiles and accessed from the \"bazel-built\" sh scripts such as `polygerrit-ui/app/polylint_test.sh`.\n\nI can try to make that work without the build dep somehow - I am not sure I can reference the source folder from within such a bash script that is compiled with bazel...",
      "parentUuid": "db6748c8_61a576f4",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "c20e64e46bd76e87ada05cd5dc9e36e66b838a8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b13adeb1_7eec9939",
        "filename": "jenkins-docker/slave-node-wct/Dockerfile",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-06-05T14:09:44Z",
      "side": 1,
      "message": "No we can call it in each job that needs the packages. My idea was just to reduce the number of required downloads by installing a basic set of the packages each time we anyway update the CI images and only download the new/updated packages.\nThe packages installed during the job run could be installed locally, but the packages that would be preinstalled in the containers would have to be installed globally, since the workspace does not exist yet, when building the containers. I am not an npm-expert, but I would expect that npm would use globally installed packages if available and not reinstall them when calling npm install in the project. So we would not have to redownload the packages each time, when there was no change to the dependencies. Does npm copy those global dependencies over to the local npm_modules, when running a local npm install and it is available globally?\n\nIf preinstalling the packages would not work, I would be fine with just running npm install every time, but it would definitely increase the download numbers for those packages ;-)",
      "parentUuid": "6abf6190_04fb6ada",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "c20e64e46bd76e87ada05cd5dc9e36e66b838a8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fc0722f_c7fa1e51",
        "filename": "jenkins-docker/slave-node-wct/Dockerfile",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-05T14:10:31Z",
      "side": 1,
      "message": "\u003e I see - does that mean there is no way to do the `npm install` in each job?\n\nWe can have the actual `npm install` in each job. However, it would be nice to have a pre-warmed copy so that the time to download the dependencies is reduced to a minimum.",
      "parentUuid": "6abf6190_04fb6ada",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "c20e64e46bd76e87ada05cd5dc9e36e66b838a8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf7ed670_ce4f8d7d",
        "filename": "jenkins-docker/slave-node-wct/Dockerfile",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-06-05T14:18:20Z",
      "side": 1,
      "message": "Would this help: https://github.com/bazelbuild/rules_nodejs#using-bazel-managed-dependencies ?\nThen we could use bazel to install the npm packages, which would also fill its own cache in the container images.",
      "parentUuid": "5fc0722f_c7fa1e51",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 15
      },
      "revId": "c20e64e46bd76e87ada05cd5dc9e36e66b838a8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}