{
  "comments": [
    {
      "key": {
        "uuid": "52d9377c_3b1e391d",
        "filename": "jenkins/gerrit-codestyle-polygerrit-install-deps.sh",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-12-17T16:31:24Z",
      "side": 1,
      "message": "so if the package.json changed, this `--offline` will fallback to `yarn install` ?",
      "revId": "42c3f96485f48d98509b9d056bc4aa3674fb0502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51fe6789_95f99fee",
        "filename": "jenkins/gerrit-codestyle-polygerrit-install-deps.sh",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-12-18T08:47:12Z",
      "side": 1,
      "message": "Exactly, if a new package is added or the version changed and is thus not in the cache, the offline install will fail and a normal \"online\" install will be started, which will get the new dependencies from the package servers. one disadvantage is, that if the version is not pinned to an exact version this online install will also get the latest allowed version of a package that did not change, which might (but should not) have unforeseen side effects. Narrowing down the allowed versions as far as possible might be a good practice.\nNote, that the online install will not update the cache, since the cache is stored inside the slave container and will thus be deleted with the container, which happens after the job is finished. Thus, the cache has to be refreshed, either regularly or after a package update happens, to again allow offline installation. We handle that similarly with the bazel versions right now, updating them by rebuilding the containers, if necessary and in the meantime use bazelisk to download a newer version, if required.",
      "parentUuid": "52d9377c_3b1e391d",
      "revId": "42c3f96485f48d98509b9d056bc4aa3674fb0502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e577b98_d21caf63",
        "filename": "jenkins/gerrit-codestyle-polygerrit-install-deps.sh",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-12-18T08:53:33Z",
      "side": 1,
      "message": "i see. if thats the case, we may need to download multiple copy of the `package.json` from all supported branches (2.16 - master) and install all of them when build the docker image.",
      "parentUuid": "51fe6789_95f99fee",
      "revId": "42c3f96485f48d98509b9d056bc4aa3674fb0502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16ce962c_c80d94c7",
        "filename": "jenkins/gerrit-codestyle-polygerrit-install-deps.sh",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-12-18T08:55:26Z",
      "side": 1,
      "message": "Yes, that\u0027s the idea and why I have this change still WIP. We first need the package.json available in all branches built by the CI.",
      "parentUuid": "9e577b98_d21caf63",
      "revId": "42c3f96485f48d98509b9d056bc4aa3674fb0502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22d3858f_b178f2c9",
        "filename": "jenkins/gerrit-codestyle-polygerrit-install-deps.sh",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-12-18T09:03:05Z",
      "side": 1,
      "message": "perfect, I will do the downport part in a separate change",
      "parentUuid": "16ce962c_c80d94c7",
      "revId": "42c3f96485f48d98509b9d056bc4aa3674fb0502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9108195_556f0c56",
        "filename": "jenkins/gerrit-codestyle-polygerrit-install-deps.sh",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-12-18T09:06:09Z",
      "side": 1,
      "message": "What if we combine both approaches? I.e. install globally old packages + yarn install to populate a cache?\nI expect, that in this case old branches will use globally installed version and new branches will use locally installed version.",
      "parentUuid": "16ce962c_c80d94c7",
      "revId": "42c3f96485f48d98509b9d056bc4aa3674fb0502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc1e1e00_e626b3c2",
        "filename": "jenkins/gerrit-codestyle-polygerrit-install-deps.sh",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-12-18T09:19:35Z",
      "side": 1,
      "message": "talked offline. This is mainly because of:\n\n1. slaves won\u0027t be able to modify global cache\n2. we don\u0027t want fetches from slaves\n3. for better support on future versions and multiple versions as well (the global cache should have all versions we need)",
      "parentUuid": "e9108195_556f0c56",
      "revId": "42c3f96485f48d98509b9d056bc4aa3674fb0502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe9e19c9_ff9fa360",
        "filename": "jenkins/gerrit-codestyle-polygerrit-install-deps.sh",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-12-18T09:20:00Z",
      "side": 1,
      "message": "Possible, but then we would still have to maintain the versions in the CI, which we would like to get rid of. Porting down the package.json is actually not a lot of work and afterwards they can develop independently over the branches, producing little work at all on old branches. And we would be consistent over all.\nAnyway, the issue that caused Tao and me to start working on this, was that eslint \u003e 6.0.0 does not support global installations anymore, at least if plugins should be used. To get it work we had to do some hacks in the scripting, which isn\u0027t nice. Having it installed locally for every build would eliminate that. WOuld be nice to have that for all supported branches.",
      "parentUuid": "e9108195_556f0c56",
      "revId": "42c3f96485f48d98509b9d056bc4aa3674fb0502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}