{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d0f22527_e9f6e0f1",
        "filename": "jenkins/gerrit-bazel-verifier-test.sh",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-02-24T00:20:35Z",
      "side": 1,
      "message": "This should also go after L20, and also include existing BAZEL_OPTS variable values.",
      "range": {
        "startLine": 17,
        "startChar": 4,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "56a312019aa41e8221abe99bf51f991944dfaa3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d57d97dc_10e321dc",
        "filename": "jenkins/gerrit-bazel-verifier-test.sh",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-02-24T10:04:06Z",
      "side": 1,
      "message": "I considered this, but on line 20 we say:\n\n  TEST_TAG_FILTER\u003d\"-flaky,-elastic\"\n\nand effectively filter out tests that depend on Docker (ES), so that we should be safe, right?",
      "parentUuid": "d0f22527_e9f6e0f1",
      "range": {
        "startLine": 17,
        "startChar": 4,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "56a312019aa41e8221abe99bf51f991944dfaa3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db0c7b0a_f82fcbd4",
        "filename": "jenkins/gerrit-bazel-verifier-test.sh",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-02-24T17:00:17Z",
      "side": 1,
      "message": "Fair enough, but what about existing BAZEL_OPTS? E.g. the Bazel cache server needs to be specified and is in the common BAZEL_OPTS, isn\u0027t it?",
      "parentUuid": "d57d97dc_10e321dc",
      "range": {
        "startLine": 17,
        "startChar": 4,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "56a312019aa41e8221abe99bf51f991944dfaa3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c018eb9f_f75a21d6",
        "filename": "jenkins/gerrit-bazel-verifier-test.sh",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-02-24T18:00:16Z",
      "side": 1,
      "message": "Yes, you are right. It doesn\u0027t matter for RBE mode, but for non-RBE mode we are overriding the BAZEL_OPTS defined:\n\n    BAZEL_OPTS\u003d--remote_cache\u003dhttps://gerrit-ci.gerritforge.com/cache\n    --java_toolchain\u003d//tools:error_prone_warnings_toolchain",
      "parentUuid": "db0c7b0a_f82fcbd4",
      "range": {
        "startLine": 17,
        "startChar": 4,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "56a312019aa41e8221abe99bf51f991944dfaa3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader",
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "56a312019aa41e8221abe99bf51f991944dfaa3e",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Verified\u003dMAX",
          "label:Verified\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "56a312019aa41e8221abe99bf51f991944dfaa3e",
      "legacy": {
        "value": false
      },
      "forced": {}
    }
  ]
}